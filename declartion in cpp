void Pos(short x, short y)//定位光标
{
	COORD pos;
	pos.X = x;
	pos.Y = y;
	HANDLE hOutPut = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleCursorPosition(hOutPut, pos);
}
void CreateMap()//创建地图
{
	for (int i = 0; i < 57; i += 2)
	{
		Pos(i, 0);
		cout << "■";
		Pos(i, 23);
		cout << "■";
	}
	for (int j = 0; j < 24; j++)
	{
		Pos(0, j);
		cout << "■";
		Pos(56, j);
		cout << "■";
	}
}
void CreateFood()
{
	if (Food == 0)//0是没有食物，1是有食物
	{
		default_random_engine e((int)time(0));//随机数引擎
		uniform_int_distribution<unsigned> u1(2, 54);//随机数分布
		uniform_int_distribution<unsigned> u2(1, 22);
		int a = u1(e);
		if (a % 2 == 1)//打印只打印偶数，遇到奇数减一
			a--;
		food_x = a;
		food_y = u2(e);
		int Food = 1;
		Pos(food_x, food_y);
		Food = 1;
		cout << "★";
		Pos(60, 3);
		cout << "食物坐标：" << food_x << " " << food_y;
	}
}
void CreateSnake()//打印出蛇
{
	body001 = (struct Body *)malloc(sizeof(struct Body));
	struct Body *p = body001;
	int i = 3, cnt = 10;
	while (i > 0)
	{
		struct Body *s = (struct Body *)malloc(sizeof(struct Body));
		s->x = cnt;
		s->y = 12;
		s->next = NULL;
		p->next = s;
		p = s;
		cnt -= 2;
		i--;
	}
	body001 = body001->next;
	p = body001;
	while (p != NULL)
	{
		Pos(p->x, p->y);
		cout << "■";
		p = p->next;
	}
	Pos(60, 5);
	cout << "蛇头坐标：" << body001->x << " " << body001->y;
}
int TouchItself()//判断蛇头是否撞到自己
{
	struct Body *p_itself = body001->next;
	while (p_itself)
	{
		if (p_itself->x == body001->x&&p_itself->y == body001->y)
			return 1;
		p_itself = p_itself->next;
	}
	return 0;
}
int TouchWall()//是否撞到墙
{
	if (body001->x == 0 || body001->x == 56 || body001->y == 0 || body001->y == 23)
		return 1;
	return 0;
}
void HaveFood()//吃到食物
{
	struct Body *p_food = (struct Body *)malloc(sizeof(struct Body));
	p_food->x = food_x;
	p_food->y = food_y;
	p_food->next = body001;
	body001 = p_food;
	score += 5;
	if (sleeptime >= 120)
		sleeptime -= 10;//每吃一个，速度加快一些
	Pos(60, 7);
	cout << "分数：" << score;
	Food = 0;
	CreateFood();


}
void NotHaveFood(struct Body *p_forward, struct Body *q, int dir)//没吃到食物，p_forward是保存下一格，q是保存蛇头
{
	if (dir == 1)
	{
		p_forward->x = body001->x;
		p_forward->y = body001->y - 1;
	}
	if (dir==2)
	{
		p_forward->x = body001->x;
		p_forward->y = body001->y + 1;
	}
	if (dir == 3)
	{
		p_forward->x = body001->x-2;
		p_forward->y = body001->y ;
	}
	if (dir == 4)
	{
		p_forward->x = body001->x + 2;
		p_forward->y = body001->y;
	}
	p_forward->next = body001;
	body001 = p_forward;
	while (q->next->next != NULL)
		q = q->next;
	Pos(q->next->x,q->next->y);
	cout << " ";
	free(q->next);
	q->next = NULL;

}
void SnakeMove()//移动一步
{
	struct Body *p_forward = (struct Body *)malloc(sizeof(struct Body));
	struct Body *q = body001;
	if (dir == 1)
	{
		if (body001->x == food_x&&body001->y - 1 == food_y)
			HaveFood();
		else
			NotHaveFood(p_forward, q, 1);
	}
	if (dir == 2)
	{
		if (body001->x == food_x&&body001->y + 1 == food_y)
			HaveFood();
		else
			NotHaveFood(p_forward, q, 2);
	}
	if (dir == 3)
	{
		if (body001->x-2 == food_x&&body001->y  == food_y)
			HaveFood();
		else
			NotHaveFood(p_forward, q, 3);
	}
	if (dir == 4)
	{
		if (body001->x + 2 == food_x&&body001->y == food_y)
			HaveFood();
		else
			NotHaveFood(p_forward, q, 4);
	}
	Pos(body001->x, body001->y);
	cout << "■";
	Pos(60, 5);
	cout << "蛇头坐标：" << body001->x << " " << body001->y;
}
void Pause()
{
	while (true)
	{
		Sleep(700);
		if (GetAsyncKeyState(VK_SPACE))
			break;
	}
}
void GamesCircle()//游戏循环
{
	while (true)
	{
		if (TouchItself() == 1)
			break;
		if (TouchWall() == 1)
			break;
		if (GetAsyncKeyState(VK_PAUSE))
			Pause();
		else if (GetAsyncKeyState(VK_UP)&&dir!=2)//当按键一满足其中一个GetAsyncKeyState条件时，便跳出循环，执行这个GetAsyncKEystate，其它的放入缓存中，等这个执行才执行后面的
			dir = 1;
		else if (GetAsyncKeyState(VK_DOWN)&&dir!=1)
			dir = 2;
		else if (GetAsyncKeyState(VK_LEFT)&&dir!=4)
			dir = 3;
		else if (GetAsyncKeyState(VK_RIGHT)&&dir!=3)
			dir = 4;
		
		 else if (GetAsyncKeyState(VK_F1))
		{
			if (sleeptime >= 100)
				sleeptime -= 10;
		}
		 else  if (GetAsyncKeyState(VK_F2))
		{
			if (sleeptime <= 220)
				sleeptime += 10;
		}
		 
		SnakeMove();
		Sleep(sleeptime);
	}
}
void Init()
{
	CreateMap();
	CreateFood();
	CreateSnake();
	
}
void Start()
{
	cout << endl;
	cout << "		贪吃蛇小游戏欢迎你！" << endl;
	cout << "		游戏说明:";
	cout << "		控制方向：" << "←左  →右 ↓上  ↑下" << endl;
	cout << "		F1 加速  F2减速" << endl;
	cout << "		四川大学计算机学院" << endl;
	system("pause");
	system("cls");
}
void End()
{
	system("cls");
	cout << "		欢迎下次再来！" << endl;
}
